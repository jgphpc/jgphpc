#%Module###

# HOSTNAME ------------------------------------------------------
set H        "[exec uname -n]"
set HH       "[string range $H 0 3]"
set HHH      "[string tolower $HH]"
# puts stderr "$H . $HH . $HHH"
# ---------------------------------------------------------------

# PE_ENV --------------------------------------------------------
if { ! [ info exists env(PE_ENV) ] } {
#        puts stderr "\$PE_ENV not set, exiting... (module load PrgEnv-xxx first please or set PE_ENV)"
#        puts stderr "setting \$PE_ENV = GNU"
        setenv  PE_ENV          "GNU"
        set     compiler        "GNU"
        #exit 0
} else {
       set compiler "$env(PE_ENV)"
}

# GNU_VERSION ---------------------------------------------------
switch -glob -- "$HHH" {
  "banc" { 
         set compiler "GNU48"
  }  "dain" - "sant" { 
          if { $compiler == "GNU" } {
                  if { $env(GCC_VERSION) == "4.7.2" } { set compiler "GNU472" }
                  if { $env(GCC_VERSION) == "4.7.3" } { set compiler "GNU473" }
                  if { $env(GCC_VERSION) == "4.8.0" } { set compiler "GNU48" }
                  if { $env(GCC_VERSION) == "4.8.1" } { set compiler "GNU48" }
                  if { $env(GCC_VERSION) == "4.8.2" } { set compiler "GNU48" }
                  if { $env(GCC_VERSION) == "4.9.0" } { set compiler "GNU49" }
                  if { $env(GCC_VERSION) == "4.9.1" } { set compiler "GNU49" }
          }
  }
}  
# puts stderr $compiler
# ---------------------------------------------------------------


# CSCS_MPI --------------------------------------------------------
if { $HHH == "monc" } {
        if { ! [ info exists env(CSCS_MPI) ] } {
                puts stderr "Please load mpi first"
                exit 0
        } else {
                set     mpiv    "$env(CSCS_MPI)$compiler"
        }
}


# APPS ----------------------------------------------------------
if { ! [ info exists env(APPS) ] } {
        puts stderr "\$APPS not set, exiting..."
        exit 0
        # set a "$env(HOSTNAME)"
        # regsub -all {[0-9]} "$a" {} apps
}


# CUDATOOLKIT ---------------------------------------------------
if  { "$HHH" == "dain" || "$HHH" == "todi" || "$HHH" == "sant" } {

  if { ! [ info exists env(CRAY_CUDATOOLKIT_VERSION) ] } {
        puts stderr "\$CRAY_CUDATOOLKIT_VERSION not set, ... please module load craype-accel-nvidia35 or cudatoolkit"
        #puts stderr "\$CRAY_CUDATOOLKIT_VERSION not set, exiting... please module load craype-accel-nvidia35 or cudatoolkit"
        #exit 0
  }

#  if { ! [ info exists env(CRAY_LIBSCI_ACC_PREFIX_DIR) ] } {
#        puts stderr "\$CRAY_LIBSCI_ACC_PREFIX_DIR not set, exiting... please module load craype-accel-nvidia35"
#        exit 0
#  }

}

if  { "$HHH" == "banc" } {
  if { ! [ info exists env(NVIDIA_DIR) ] } {
        puts stderr "\$NVIDIA_DIR not set, ... please module load nvidia/7.0.18"
  }
}

# ---------------------------------------------------------------
#if { ! [ info exists env(APPS) ] } {
#        puts stderr "\$CRAY_CUDATOOLKIT_DIR not set"
#}

# puts stderr "HHH=$HHH compiler=$compiler mpiv=$mpiv"
# SWITCH --------------------------------------------------------
#set all "a;b;c;d;e"
set all "a;b;c;d;e;f;g;h;i;j;l;m;n;o;p"
# ROSA+INTEL = recompile with libbfd ?
#  CCE+INTEL = recompile with libbfd ?
# ---------------------------------------------------------------
# ------------------
# scorepv         1.2.3;
# compV           gnu_482;
# mpiv            cray-mpich/6.3.1;
# cudav           cudatoolkit/5.5.20-1;
# nvidiav         craype-accel-nvidia35;
# libsciv         cray-libsci_acc/3.0.1;$env(CRAY_CUDATOOLKIT_DIR)/extras/CUPTI/lib64
# papiv           papi/5.3.0;
# opariv          opari/internal;
# otfv            otf/2-1.4;
# cubev           cube/4.2.2;
# statv           stat/2.0.0.1;
# utilsv          binutils/2.22;
# doxv            doxygen/1.8.4;
# uncv            uncrustify/0.60;
# ------------------

#
# GNU { set all "1.3;gnu_482;cray-mpich/7.0.1;cudatoolkit/5.5.20-1.0501.7945.8.2;cuda;cuda;cray-libsci/13.0.0;papi/5.3.1;opari2/1.1.2;otf/2-1.4;cube/4.2.3;stat/8.12;binutils/2.22;doxygen/1.8.4;uncrustify/0.60;" }
#
switch -glob -- "$HHH" {
  "banc" - "sant" { 
    switch "$compiler" {
       GNU48 { set all "1.4;gnu_482sharedlibs;openmpi/1.6.5-8;x;346.35;/apps/nvidia/7.0.18-19128344;nolibsci;papi/5.4.0;opari/2-1.1.2;otf/2-1.5.1;cube/4.3;scalasca/2.2;vampir/8.4;x;x;" }
       default { puts stderr "No version installed for this compiler $compiler yet, exiting..." ; exit 0 }
                       }
       }
  default { puts stderr "Not installed on this system ($HHH) yet, exiting..." ; exit 0 }
}

# LASSIGN -------------------------------------------------------
set fields [ split $all ";" ]
lassign $fields scorepv compV mpiv cudav nvidiav toolkitv libsciv papiv opariv otfv cubev statv utilsv doxv uncv 
  # puts stderr "$fields"
  # puts stderr "scorepv $scorepv"
  # puts stderr "compV   $compV"
  # puts stderr "mpiv    $mpiv"
  # puts stderr "cudav   $cudav"
  # puts stderr "nvidiav $nvidiav"
  # puts stderr "toolkitv $toolkitv"
  # puts stderr "libsciv $libsciv"
  # puts stderr "papiv   $papiv"
  # puts stderr "opariv  $opariv"
  # puts stderr "otfv    $otfv"
  # puts stderr "cubev   $cubev"
  # puts stderr "statv   $statv"
  # puts stderr "utilsv  $utilsv"
  # puts stderr "doxv    $doxv"
  # puts stderr "uncv    $uncv"
#lassign $fields compV mpi papi v otf libsci
# ---------------------------------------------------------------


# ---------------------------------------------------------------
# set    --> will set the variable for the script, nothing more
# setenv --> will export the variable to the user environment
# ---------------------------------------------------------------
set     url                        "http://user.cscs.ch"
set     url2                       "http://www.vi-hps.org/projects/score-p/"
set     modulename                 "scorep"
set     packageroot                "$env(APPS)/$modulename/$scorepv/$compV"

# ---------------------------------------------------------------
# if { [ module-info mode load ] } {

        setenv          CSCS_SCOREP             "$packageroot"
	setenv          SCOREP_ROOT             "$packageroot"
	setenv          SCOREP_DIR              "$packageroot"

        # SCOREP PATHS
        setenv          SEP                     "----------------------------"
	append-path     PE_PRODUCT_LIST         "[string toupper $modulename]"
        prepend-path    PATH                    "$packageroot/bin"
        prepend-path    LD_LIBRARY_PATH         "$packageroot/lib"

        # RUNTIME VARS
        setenv          SEP                     "----------------------------"
	setenv          SCOREP_ENABLE_PROFILING "true"
	setenv          SCOREP_CUDA_ENABLE      "no"
	setenv          SCOREP_ENABLE_TRACING   "false"
        setenv          SEP                     "----------------------------"

        # -------------------------------------------------------------------------
        # OPARI $otfv
        prepend-path    PATH                    "/apps/otf/2-1.5.1/gnu_482/bin"
        
        # -------------------------------------------------------------------------
        # OPARI $opariv
	prepend-path    PATH                    "/apps/opari/2-1.1.2/gnu_482/bin"

        # -------------------------------------------------------------------------
        # SCALASCA
	prepend-path    PATH                    "/apps/scalasca/2.2/gnu_482/bin"
        
        # -------------------------------------------------------------------------
        # CUBE $cubev
        setenv         SEP               "----------------------------"
        set            cubep             "/apps/cube/4.3/gnu_482"
	setenv         CUBE_DIR          "$cubep"
	prepend-path   PATH              "$cubep/bin"
	prepend-path   LD_LIBRARY_PATH   "$cubep/lib"
	prepend-path   CLASSPATH         "$cubep/lib"
        prepend-path   CUBE_PLUGIN_DIR   "$cubep/lib/plugins"
         
        # -------------------------------------------------------------------------
        # VAMPIR:
        setenv          SEP              "----------------------------"
        setenv          VAMPIR_DIR       "/apps/vampir/8.4"
	prepend-path    PATH             "/apps/vampir/8.4/bin"

        # -------------------------------------------------------------------------
        # TAU:
        setenv          SEP              "----------------------------"
        setenv          TAU_DIR          "/apps/santis/tau/2.22.2/gnu_472"
        prepend-path    PATH             "/apps/santis/tau/2.22.2/gnu_472/x86_64/bin"
        prepend-path    LD_LIBRARY_PATH  "/apps/santis/tau/2.22.2/gnu_472/x86_64/lib"
        prepend-path    MANPATH          "/apps/santis/tau/2.22.2/gnu_472/man"
        append-path     MODULEPATH       "/users/piccinal/modulefiles"
        #prepend-path    PATH             "$env(APPS)/tau/2.22.2/gnu_472/craycnl/bin"
        #prepend-path    LD_LIBRARY_PATH  "$env(APPS)/tau/2.22.2/gnu_472/craycnl/lib"
        #prepend-path    MANPATH          "$env(APPS)/tau/2.22.2/gnu_472/man"
        setenv          SEP              "----------------------------"

        # -------------------------------------------------------------------------
        # PAPI:
        # module          load             "$papiv"
        prepend-path    PATH             "/apps/papi/5.4.0/gnu_482/bin"
        prepend-path    MANPATH          "/apps/papi/5.4.0/gnu_482/man"
        prepend-path    LD_LIBRARY_PATH  "/apps/papi/5.4.0/gnu_482/lib"

        # -------------------------------------------------------------------------
        # MPI $mpiv
        # CUDA        $cudav
        # NVIDIA      $nvidiav
        # CUDATOOLKIT $toolkitv
        # prepend-path    LD_LIBRARY_PATH         "$libsci"
        #prepend-path    LD_LIBRARY_PATH         "$env(CRAY_CUDATOOLKIT_DIR)/extras/CUPTI/lib64"
        # LIBSCI $libsciv
        # PAPI $papiv
        # OTF $otfv
	#not_needed: prepend-path    PATH                    "/apps/daint/otf/2-1.2.1/gnu_434/bin"

        # -------------------------------------------------------------------------
        # STAT $statv
        # prepend-path    PATH                    "/opt/cray/stat/default/bin"

        # BINUTILS $utilsv
        # export PATH=/apps/dora/binutils/2.24/gnu_434/bin:$PATH

        # DOXYGEN / UNCRUSTIFY $doxv / $uncv
        # LINUX:
        #prepend-path    PATH                    "/apps/ela/sandbox/jgp/doxygen/1.8.4/gnu_434/bin"
        #prepend-path    PATH                    "/apps/ela/sandbox/jgp/uncrustify/0.60/gnu_434/bin"
        
        # -------------------------------------------------------------------------
        # JAVA jre1.7.0_55
        # prepend-path    PATH                    "/apps/daint/scorep/java/jre1.7.0_55/bin"

        # -------------------------------------------------------------------------
        # REDHAT (non SLES) DEPS:
	#append-path    PATH                     "$env(APPS)/otf/2-1.2/gnu_447/bin"
	#append-path    PATH                     "$env(APPS)/cube/4.2/gnu_447/bin"
	#append-path    PATH                     "$env(APPS)/opari/2-1.1/gnu_447/bin"


# }


# ---------------------------------------------------------------
# Help message called by : module help ...
# ---------------------------------------------------------------
# for i in SCOREP_ENABLE_PROFILING SCOREP_ENABLE_TRACING SCOREP_CUDA_ENABLE ;do echo echo $i = \$$i |sh ;done
if { [ module-info mode help ] } {
proc ModulesHelp {} {
  # global url url2 modulename packageroot env compV mpi papi v otf
  global url url2 modulename packageroot env scorepv compV mpiv cudav nvidiav toolkitv libsciv papiv opariv otfv cubev statv utilsv doxv uncv 

# \033\[01;32m${compV}\033\[0m + $papiv $otfv ===
  puts stderr "
         \t === $modulename/\033\[01;32m${scorepv}\033\[0m ===
         \t === This version was compiled with:
         \t ===  $compV $mpiv 
         \t ===  $cudav $nvidiav $toolkitv $libsciv $papiv 
         \t ===  $opariv $otfv $cubev
         \t === See \033\[01;32m$packageroot\033\[0m ===
         \t === Please report bugs to support@score-p.org ===
         \t === scorep-info config-summary ===

          \tDocs : 
          \t      $url
          \t      $url2"
 
    puts stderr "
          \tUsage : 
          \t Build your application :
          \t scorep --help
          \t mpi only :
          \t   \033\[01;32mscorep --mpp=mpi\033\[0m ftn -c test.f90
          \t   \033\[01;32mscorep --mpp=mpi\033\[0m ftn -o test.exe test.o
          \t    add \033\[01;32m --thread=omp\033\[0m if needed: \033\[01;32mscorep --mpp=mpi --thread=omp\033\[0m ftn ...
          \t    add \033\[01;32m --opencl\033\[0m for OpenCL instrumentation
          \t    add \033\[01;32m --thread=pthread\033\[0m for pthreads (more infos with scorep --help)
          \t GNU: add cc -finstrument-functions-exclude-file-list=intrin.h when compiling with intrinsics.
 
          \t cuda only : 
          \t \033\[01;32m GNU/scorep -v --cuda nvcc\033\[0m cu.cu
          \t
          \t Choose your experiment :
          \t Profiling:
export \033\[01;32mSCOREP_ENABLE_PROFILING\033\[0m=$env(SCOREP_ENABLE_PROFILING)  \# true or false
export \033\[01;32mSCOREP_ENABLE_TRACING\033\[0m=$env(SCOREP_ENABLE_TRACING)   \# true or false
export \033\[01;32mSCOREP_CUDA_ENABLE\033\[0m=$env(SCOREP_CUDA_ENABLE)       \# yes (not true or false !)
          \t Tracing:
export \033\[01;32mSCOREP_ENABLE_PROFILING\033\[0m=false
export \033\[01;32mSCOREP_ENABLE_TRACING\033\[0m=true
export \033\[01;32mSCOREP_CUDA_ENABLE\033\[0m=yes
export \033\[01;32mSCOREP_OPENCL_ENABLE\033\[0m=yes
          \t OpenACC: PGI only (for now)
          \t Power counters: 
export \033\[01;32mSCOREP_ENABLE_PROFILING\033\[0m=false
export \033\[01;32mSCOREP_ENABLE_TRACING\033\[0m=true
export \033\[01;32mSCOREP_CUDA_ENABLE\033\[0m=yes
export \033\[01;32mSCOREP_TOTAL_MEMORY\033\[0m=100M
export \033\[01;32mSCOREP_METRIC_PLUGINS\033\[0m=pm_plugin
export \033\[01;32mSCOREP_METRIC_PM_PLUGIN\033\[0m=all
  
           \t You may also want to try the following advanced settings:
          \t export SCOREP_FILTERING_FILE=filter.scorep
          \t export SCOREP_CUDA_BUFFER=2M
          \t export SCOREP_TOTAL_MEMORY=50M
          \t export SCOREP_EXPERIMENT_DIRECTORY=myexp
          \t module load papi ; export SCOREP_METRIC_PAPI=PAPI_L2_TCM
          \t    MFLOPS are not available on Intel Haswell processors: 
          \t    Intel 64 and IA-32 Architectures Software Developer Manual, 
          \t    Order Number 253665-050US, February 2014.
          \t You can not count floating point at all on Haswell cpu:
          \t http://comments.gmane.org/gmane.comp.linux.papi/1058 

          \t More infos about scorep variables: 
          \t      \$SCOREP_ROOT/bin/backend/\033\[01;31mscorep-backend-info config-vars\033\[0m
          \t      or in the rundir/scorep*/scorep.cfg
          \t If you want to record the profile in TAU snapshot format, set SCOREP_PROFILING_FORMAT=TAU_SNAPSHOT
  
          \t Submit and run your job ...
  
          \t Visualize the results : == \033\[01;31mSCALASCA\033\[0m ==
          \t   cube       */profile.cubex ; echo \$CUBE_DIR
          \t   scorep-score -r */profile.cubex       \# <=> cube3_score epik*/epitome.cube
          \t   cube_stat \[-t 1000000\] */profile.cubex
          \t   cube_score */profile.cubex
          \t   cube4to3   */profile.cubex
          \t   cube_calltree -a -f */profile.cubex
  
          \t Visualize the results : == \033\[01;31mVAMPIR\033\[0m ==
          \t   only when SCOREP_ENABLE_TRACING = true
          \t   vampir     */traces.otf2   \# (vampir/8.1 supports otf>=1.2, vampir/8.0 supports otf<=1.1.1 )
          \t                              \# => try \$APPS/vampir/8.2.1/bin/vampir
  
          \t Visualize the results : == \033\[01;31mTAU\033\[0m ==
          \t   paraprof   */profile.cubex"
  
    puts stderr "
         \t Troubleshooting : \033\[01;32msupport@score-p.org / help@cscs.ch\033\[0m"

#    puts stderr "
#           \t -------------------------------------------------------------------------------
#           \t Please consider the following limitations when using the Cray compiler (CCE) :
#           \t
#           \t (1) Profiling and/or tracing seem to work fine except for this message when running executables compiled with cce :
#           \t           Warning: Force exit for region perf_test_suite_
#           \t The SCORE-P team is working on a fix.
#           \t
#           \t (2) There is a bug in CCE 8.x handling 'if' clauses in OpenMP parallel
#           \t pragmas. A fix will be available in the next bugfix release of OPARI2 (used for OpenMP instrumentation). 
#           \t
#           \t Except for these limitations, Cray compiler instrumentation should work fine.
#           \t -------------------------------------------------------------------------------"
  
  
  
# scorep-bugs@groups.tu-dresden.de"       
#          \t\033\[01;32m pilatus:\033\[0m add -pgf90libs to the link line when compiling with pgi / i have seen some mpi deadlocks with gnu 
#          \t\033\[01;32m   eiger:\033\[0m add -pgf90libs to the link line when compiling with pgi
#          \t\033\[01;32m   intel:\033\[0m \"BFD: Dwarf Error: mangled line number section (bad file number)\" can be safely ignored
#          \t\033\[01;32m   domnv:\033\[0m Run with mpiexec"

  return 0
}
}

# ============================================================================
# Short help message called by : module whatis ...
# ============================================================================
if { [ module-info mode whatis ] } {
module-whatis "Set environment variables to enable the usage of the $modulename $version library."
}
